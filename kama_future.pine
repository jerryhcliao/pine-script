// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © jerryhcliao1123
//@version=6
strategy("KAMA Strategy - Futures", 
     overlay=true, 
     precision=2, 
     initial_capital=200000, 
     pyramiding=0, 
     default_qty_type = strategy.fixed,
     margin_long=100,
     margin_short=100)

// --- K线时间，方便调试 ---
// 获取各个时间组件
yr = year(time)
mo = month(time)
dy = dayofmonth(time)
hr = hour(time)
min = minute(time)
sec = second(time)

// 转换月、日、时、分、秒为两位数格式
mo_str = mo < 10 ? "0" + str.tostring(mo) : str.tostring(mo)
dy_str = dy < 10 ? "0" + str.tostring(dy) : str.tostring(dy)
hr_str = hr < 10 ? "0" + str.tostring(hr) : str.tostring(hr)
min_str = min < 10 ? "0" + str.tostring(min) : str.tostring(min)

// 组合成最终格式
k_formatted_time = str.tostring(yr) + mo_str + dy_str + hr_str + min_str

// =============== 参数设置 ===============
// KAMA参数
kama_length = input.int(60, title="KAMA Length", minval=1)
kama_fastend = input.float(0.6660, title="KAMA - Fast End", minval=0.01, maxval=1.0, step=0.01)
kama_slowend = input.float(0.0645, title="KAMA - Slow End", minval=0.01, maxval=0.2, step=0.01)

// 计算KAMA斜率，使用线性回归来判断趋势强度
kama_slope_length = input.int(10, title="KAMA斜率计算周期", minval=5, maxval=50, group="趋势判断")
kama_min_slope = input.float(0.05, title="最小斜率阈值", minval=0.01, maxval=2.0, step=0.01, group="趋势判断")

// 仓位和风险参数
risk_percent = input.float(2.0, "风险比例(%)", minval=1, maxval=100, group="风险管理") * 0.01

// ATR参数
atr_length = input.int(60, "ATR周期", minval=1, group="ATR设置")

// 背离检测参数
divergence_length = input.int(60, "背离检测周期", minval=5, group="背离设置")

// 计算5年的毫秒数 (5 * 365 * 24 * 60 * 60 * 1000)
fiveYearsInMs = 5 * 365 * 24 * 60 * 60 * 1000
// 是否在交易时间范围内
in_trading_timeframe = time > (timenow - fiveYearsInMs)

// =============== 指标计算 ===============
// 基础计算
xPrice = close
xvnoise = math.abs(xPrice - xPrice[1])
nsignal = math.abs(xPrice - xPrice[kama_length])
nnoise = math.sum(xvnoise, kama_length)
nefratio = nnoise != 0 ? nsignal / nnoise : 0

// 计算ATR
atr = ta.atr(atr_length)

// KAMA计算
var float kama = 0.0
kama_smooth = math.pow(nefratio * (kama_fastend - kama_slowend) + kama_slowend, 2)
kama := nz(kama[1]) + kama_smooth * (xPrice - nz(kama[1]))

// 基于斜率判断趋势方向
kama_rising = kama > kama[1]
kama_falling = kama < kama[1]

// =============== 背离检测 ===============
// 顶背离：价格创新高但KAMA未创新高
price_highest = ta.highest(high, divergence_length)
kama_highest = ta.highest(kama, divergence_length)
top_divergence = high == price_highest and kama < kama_highest and kama_falling

// 底背离：价格创新低但KAMA未创新低
price_lowest = ta.lowest(low, divergence_length)
kama_lowest = ta.lowest(kama, divergence_length)
bottom_divergence = low == price_lowest and kama > kama_lowest and kama_rising

// =============== 方向判断 ===============
// 交叉信号
bullish_cross = close > kama
bearish_cross = close < kama

// =============== 仓位计算 ==============
// 计算止损点数
stop_points = atr * 2

// 单笔风险
max_loss_amount = strategy.equity * risk_percent

// 计算合适的仓位大小（手数）
position_size_plan = math.floor(max_loss_amount / stop_points / syminfo.pointvalue)

// =============== 止损变量 ===============
// 止损价格
var float stop_price = 0

// =============== 入场条件检查 ===============
// 多头入场：价格上穿KAMA且KAMA向上
long_entry_condition = strategy.position_size == 0 and in_trading_timeframe and
                      bullish_cross and kama_rising

// 空头入场：价格下穿KAMA且KAMA向下
short_entry_condition = strategy.position_size == 0 and in_trading_timeframe and
                       bearish_cross and kama_falling

// 多头入场
if long_entry_condition
    stop_price := close - stop_points
    strategy.entry("Long", strategy.long, position_size_plan, comment="多单@" + syminfo.ticker + " 开仓价:" + str.tostring(close, "#.##") + " 止损价:" + str.tostring(stop_price, "#.##"))
    strategy.exit("Long_Stop_Loss", "Long", stop=stop_price, comment=syminfo.ticker + " 多单止损")

// 空头入场
if short_entry_condition
    stop_price := close + stop_points
    strategy.entry("Short", strategy.short, position_size_plan, comment="空单@" + syminfo.ticker + " 开仓价:" + str.tostring(close, "#.##") + " 止损价:" + str.tostring(stop_price, "#.##"))
    strategy.exit("Short_Stop_Loss", "Short", stop=stop_price, comment=syminfo.ticker + " 空单止损")

// =============== 止盈条件检查 ===============
// 止盈条件：反向交叉或背离
long_profit_exit = strategy.position_size > 0 and (bearish_cross or top_divergence)
short_profit_exit = strategy.position_size < 0 and (bullish_cross or bottom_divergence)

// 执行止盈
if long_profit_exit and strategy.position_size > 0
    strategy.close("Long", comment=syminfo.ticker + " 多单平仓")

if short_profit_exit and strategy.position_size < 0
    strategy.close("Short", comment=syminfo.ticker + " 空单平仓")

// =============== 绘制指标 ===============
// 绘制KAMA均线
plot(kama, color=color.blue, linewidth=2, title="KAMA")

// =============== 信息显示 ===============
var label info = label.new(bar_index, na, "", color=color.blue, style=label.style_label_left, textcolor=color.white)
label.set_xy(info, bar_index, high)

label.set_text(info, "单KAMA期货策略" + 
     "\n权益：" + str.tostring(math.round(strategy.equity)) + 
     "\n浮盈：" + str.tostring(math.round(strategy.openprofit)) +
     "\n单笔风险：" + str.tostring(math.round(max_loss_amount)))