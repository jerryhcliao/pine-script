//@version=6
// =============== 策略设置 ===============
strategy("KAMA Strategy - Futures", 
     overlay=true, 
     precision=2, 
     initial_capital=200000, 
     pyramiding=0, 
     default_qty_type = strategy.fixed,
     margin_long=100,
     margin_short=100)

// =============== 参数设置 ===============
// 基础参数
length = input.int(21, title="KAMA Length", minval=1)

// 快线参数（更敏感）
fast_fastend = input.float(0.8, title="Fast KAMA - Fast End", minval=0.01, maxval=1.0, step=0.01)
fast_slowend = input.float(0.1, title="Fast KAMA - Slow End", minval=0.01, maxval=0.5, step=0.01)

// 慢线参数（更平滑）
slow_fastend = input.float(0.4, title="Slow KAMA - Fast End", minval=0.01, maxval=1.0, step=0.01)
slow_slowend = input.float(0.04, title="Slow KAMA - Slow End", minval=0.01, maxval=0.2, step=0.01)

// 仓位和风险参数
risk_percent = input.float(2.0, "风险比例(%)", minval=1, maxval=100, group="风险管理") * 0.01

// 计算5年的毫秒数 (5 * 365 * 24 * 60 * 60 * 1000)
fiveYearsInMs = 5 * 365 * 24 * 60 * 60 * 1000
// 是否在交易时间范围内
in_trading_timeframe = not five_year_limitation or time > (timenow - fiveYearsInMs)

// =============== 指标计算 ===============
// 基础计算
xPrice = close
xvnoise = math.abs(xPrice - xPrice[1])
nsignal = math.abs(xPrice - xPrice[length])
nnoise = math.sum(xvnoise, length)
nefratio = nnoise != 0 ? nsignal / nnoise : 0

// 快线KAMA计算
var float fast_KAMA = 0.0
fast_smooth = math.pow(nefratio * (fast_fastend - fast_slowend) + fast_slowend, 2)
fast_KAMA := nz(fast_KAMA[1]) + fast_smooth * (xPrice - nz(fast_KAMA[1]))

// 慢线KAMA计算  
var float slow_KAMA = 0.0
slow_smooth = math.pow(nefratio * (slow_fastend - slow_slowend) + slow_slowend, 2)
slow_KAMA := nz(slow_KAMA[1]) + slow_smooth * (xPrice - nz(slow_KAMA[1]))

// =============== 方向判断 ===============
// 交叉信号
bullish_cross = ta.crossover(fast_KAMA, slow_KAMA)
bearish_cross = ta.crossunder(fast_KAMA, slow_KAMA)

// =============== 仓位计算 ==============
// 计算止损点数
stop_points = atr * 2

// 单笔风险
max_loss_amount = strategy.equity * risk_percent

// 计算合适的仓位大小（手数）
position_size_plan = math.floor(max_loss_amount / stop_points / syminfo.pointvalue)

// =============== 止损变量 ===============
// 止损价格
var float stop_prize = 0

// =============== 入场条件检查 ===============
long_entry_condition = strategy.position_size == 0 and in_trading_timeframe and
                      bullish_cross

short_entry_condition = strategy.position_size == 0 and in_trading_timeframe and
                       bearish_cross
// 多头入场
if long_entry_condition
    stop_prize := close - stop_points
    strategy.entry("Long", strategy.long, position_size_plan)
    strategy.exit("Long_Stop_Loss", "Long", stop=stop_prize)

// 空头入场
if short_entry_condition
    stop_prize := close + stop_points
    strategy.entry("Short", strategy.short, position_size_plan)
    strategy.exit("Short_Stop_Loss", "Short", stop=stop_prize)

// =============== 止盈条件检查 ===============
// 止盈条件
long_profit_exit = strategy.position_size > 0 and bearish_cross
short_profit_exit = strategy.position_size < 0 and bullish_cross

// 执行止盈
if long_profit_exit and strategy.position_size > 0
    strategy.close("Long", comment="Long_Take_Profit")

if short_profit_exit and strategy.position_size < 0
    strategy.close("Short", comment="Short_Take_Profit")

// =============== 绘制指标 ===============
// 绘制均线
plot(fast_KAMA, color=color.red, linewidth=1, title="Fast KAMA")
plot(slow_KAMA, color=color.blue, linewidth=1, title="Slow KAMA")

// 绘制止损价位线（只在有持仓时显示）
stop_loss_color = strategy.position_size > 0 ? color.new(color.red, 0) : strategy.position_size < 0 ? color.new(color.green, 0) : na

plot(strategy.position_size != 0 ? stop_prize : na, color=stop_loss_color, linewidth=1, style=plot.style_stepline, title="Stop Loss")

// =============== 信息显示 ===============
var label info = label.new(bar_index, na, "", color=color.blue, style=label.style_label_left, textcolor=color.white)
label.set_xy(info, bar_index, high)

label.set_text(info, "期货模式" + 
     "\n\n权益：" + str.tostring(math.round(strategy.equity)) + 
     "\n\n浮盈：" + str.tostring(math.round(strategy.openprofit)) +
     "\n\n单笔风险：" + str.tostring(math.round(max_loss_amount)))