//@version=6
// =============== 策略设置 ===============
strategy("期货双向网格交易策略", 
     overlay=true, 
     precision=2, 
     initial_capital=200000, 
     pyramiding=40, 
     default_qty_type = strategy.fixed,
     margin_long=10,
     margin_short=10,
     process_orders_on_close=true)

// --- K线时间，方便调试 ---
// 获取各个时间组件
yr = year(time)
mo = month(time)
dy = dayofmonth(time)
hr = hour(time)
min = minute(time)
sec = second(time)

// 转换月、日、时、分、秒为两位数格式
mo_str = mo < 10 ? "0" + str.tostring(mo) : str.tostring(mo)
dy_str = dy < 10 ? "0" + str.tostring(dy) : str.tostring(dy)
hr_str = hr < 10 ? "0" + str.tostring(hr) : str.tostring(hr)
min_str = min < 10 ? "0" + str.tostring(min) : str.tostring(min)

// 组合成最终格式
k_formatted_time = str.tostring(yr) + mo_str + dy_str + hr_str + min_str

// =============== 网格策略参数 ===============
fixed_qty = 2  // 固定每次交易2手
grid_drop_percent = input.float(5.0, "网格间距(%)", minval=1.0, step=0.5, group="网格设置") * 0.01
take_profit_percent = input.float(10.0, "止盈百分比(%)", minval=1.0, step=0.5, group="网格设置") * 0.01
max_grids = input.int(10, "单向最大网格层数", minval=1, maxval=20, group="网格设置")

// =============== 双向网格状态变量 ===============
// 多单网格数组
var float[] long_entry_prices = array.new_float(max_grids, 0.0)
var string[] long_entry_ids = array.new_string(max_grids, "")

// 空单网格数组  
var float[] short_entry_prices = array.new_float(max_grids, 0.0)
var string[] short_entry_ids = array.new_string(max_grids, "")

// 网格状态变量
var float center_price = 0.0  // 中心价格
var int long_next_slot = 0    // 多单下一个网格槽位
var int short_next_slot = 0   // 空单下一个网格槽位
var bool initialized = false  // 是否已初始化

// 当前网格价格
var float next_long_grid_price = 0.0   // 下一个多单网格价格
var float next_short_grid_price = 0.0  // 下一个空单网格价格

// 价格跟踪
var float last_long_price = 0.0
var float long_profit_price = 0.0
var float last_short_price = 0.0
var float short_profit_price = 0.0

// =============== 辅助函数 ===============
// 计算多单网格价格（向下）
calculate_long_grid_price(center, level) =>
    center * (1 - grid_drop_percent * level)

// 计算空单网格价格（向上）
calculate_short_grid_price(center, level) =>
    center * (1 + grid_drop_percent * level)

// 初始化网格
if not initialized
    center_price := close
    next_long_grid_price := calculate_long_grid_price(center_price, 1)
    next_short_grid_price := calculate_short_grid_price(center_price, 1)
    initialized := true

// 重置逻辑
if strategy.position_size == 0
    long_next_slot := 0
    short_next_slot := 0

// =============== 多单网格逻辑 ===============
// 多单加仓条件：价格下跌至多单网格点
long_add_condition = close <= next_long_grid_price and long_next_slot < max_grids

// 多单加仓
if long_add_condition
    long_level = long_next_slot + 1
    entryId = "多单网格#" + str.tostring(long_level)
    strategy.entry(entryId, strategy.long, qty=fixed_qty, comment="多单#" + str.tostring(long_level) + "@" + str.tostring(close))
    
    // 记录多单信息
    array.set(long_entry_prices, long_next_slot, close)
    array.set(long_entry_ids, long_next_slot, entryId)
    
    // 更新多单网格状态
    long_next_slot := long_next_slot + 1
    if long_next_slot < max_grids
        next_long_grid_price := calculate_long_grid_price(center_price, long_next_slot + 1)

// 多单止盈逻辑
if long_next_slot > 0
    target_slot = long_next_slot - 1
    entry_price = array.get(long_entry_prices, target_slot)
    entry_id = array.get(long_entry_ids, target_slot)
    profit_price = entry_price * (1 + take_profit_percent)
    
    if close >= profit_price
        strategy.close(entry_id, qty=fixed_qty, comment="多单止盈#" + str.tostring(target_slot + 1) + "@" + str.tostring(close))
        long_next_slot := long_next_slot - 1
        if long_next_slot < max_grids
            next_long_grid_price := calculate_long_grid_price(center_price, long_next_slot + 1)

// =============== 空单网格逻辑 ===============
// 空单加仓条件：价格上涨至空单网格点
short_add_condition = close >= next_short_grid_price and short_next_slot < max_grids

// 空单加仓
if short_add_condition
    short_level = short_next_slot + 1
    entryId = "空单网格#" + str.tostring(short_level)
    strategy.entry(entryId, strategy.short, qty=fixed_qty, comment="空单#" + str.tostring(short_level) + "@" + str.tostring(close))
    
    // 记录空单信息
    array.set(short_entry_prices, short_next_slot, close)
    array.set(short_entry_ids, short_next_slot, entryId)
    
    // 更新空单网格状态
    short_next_slot := short_next_slot + 1
    if short_next_slot < max_grids
        next_short_grid_price := calculate_short_grid_price(center_price, short_next_slot + 1)

// 空单止盈逻辑
if short_next_slot > 0
    target_slot = short_next_slot - 1
    entry_price = array.get(short_entry_prices, target_slot)
    entry_id = array.get(short_entry_ids, target_slot)
    profit_price = entry_price * (1 - take_profit_percent)
    
    if close <= profit_price
        strategy.close(entry_id, qty=fixed_qty, comment="空单止盈#" + str.tostring(target_slot + 1) + "@" + str.tostring(close))
        short_next_slot := short_next_slot - 1
        if short_next_slot < max_grids
            next_short_grid_price := calculate_short_grid_price(center_price, short_next_slot + 1)

// =============== 绘制价格线 ===============
// 绘制中心价格线
plot(center_price, "中心价格", color=color.new(#7d7c75, 0), linewidth=2)

// 绘制多单网格线
plot(long_next_slot < max_grids ? next_long_grid_price : na, "下一多单网格", color=color.new(#f6320f, 0), style=plot.style_cross)

// 绘制空单网格线
plot(short_next_slot < max_grids ? next_short_grid_price : na, "下一空单网格", color=color.new(#079549, 3), style=plot.style_cross)

// 绘制多单止盈线
if long_next_slot > 0
    last_long_price := array.get(long_entry_prices, long_next_slot - 1)
    long_profit_price := last_long_price * (1 + take_profit_percent)

plot(long_next_slot > 0 ? long_profit_price : na, "多单止盈价", color=color.new(color.lime, 0), style=plot.style_stepline_diamond)

// 绘制空单止盈线
if short_next_slot > 0
    last_short_price := array.get(short_entry_prices, short_next_slot - 1)
    short_profit_price := last_short_price * (1 - take_profit_percent)

plot(short_next_slot > 0 ? short_profit_price : na, "空单止盈价", color=color.new(color.orange, 0), style=plot.style_stepline_diamond)

// =============== 信息显示 ===============
var label info = label.new(bar_index, na, "", color=color.blue, style=label.style_label_left, textcolor=color.white)

label.set_xy(info, bar_index, high)

// 构建详细信息文本
var string info_text = ""

// 基础策略信息
info_text := "网格交易策略(期货版本)\n"
info_text := info_text + "中心价格: " + str.tostring(center_price, "#.##") + "\n"

// 持仓信息
info_text := info_text + "当前持仓: " + str.tostring(strategy.position_size) + " 手\n"

if strategy.position_size > 0
    info_text := info_text + "持仓方向: 多单\n"
    info_text := info_text + "持仓盈亏: " + str.tostring(strategy.openprofit, "#.##") + "\n"
    if long_next_slot > 0
        info_text := info_text + "下一多单网格: " + str.tostring(next_long_grid_price, "#.##") + "\n"
        info_text := info_text + "最新多单价格: " + str.tostring(last_long_price, "#.##") + "\n"
        info_text := info_text + "多单止盈目标: " + str.tostring(long_profit_price, "#.##") + "\n"
else if strategy.position_size < 0
    info_text := info_text + "持仓方向: 空单\n"
    info_text := info_text + "持仓盈亏: " + str.tostring(strategy.openprofit, "#.##") + "\n"
    if short_next_slot > 0
        info_text := info_text + "下一空单网格: " + str.tostring(next_short_grid_price, "#.##") + "\n"
        info_text := info_text + "最新空单价格: " + str.tostring(last_short_price, "#.##") + "\n"
        info_text := info_text + "空单止盈目标: " + str.tostring(short_profit_price, "#.##") + "\n"
else
    info_text := info_text + "持仓方向: 无持仓\n"

label.set_text(info, info_text)